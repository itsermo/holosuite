set(HOLOSUITE_LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR})

# Glob all sources file inside directory ${CMAKE_CURRENT_SOURCE_DIR}
file(GLOB_RECURSE LIB_SRC_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/*.h
	${CMAKE_CURRENT_SOURCE_DIR}/*.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/*.cxx
    ${CMAKE_CURRENT_SOURCE_DIR}/*.c
	${CMAKE_CURRENT_SOURCE_DIR}/*.C
	${CMAKE_CURRENT_SOURCE_DIR}/*.cc
	${CMAKE_CURRENT_SOURCE_DIR}/*.cg
	${CMAKE_CURRENT_SOURCE_DIR}/*.cl
)

file(GLOB_RECURSE LIB_H_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/*.h
	${CMAKE_CURRENT_SOURCE_DIR}/*.hpp
)

foreach(f ${LIB_SRC_FILES})
    # Get the path of the file relative to ${DIRECTORY},
    # then alter it (not compulsory)
    file(RELATIVE_PATH SRCGR ${CMAKE_CURRENT_SOURCE_DIR} ${f})
    #set(SRCGR "${SRCGR}")

    # Extract the folder, ie remove the filename part
    string(REGEX REPLACE "(.*)(/[^/]*)$" "\\1" SRCGR ${SRCGR})

    # Source_group expects \\ (double antislash), not / (slash)
    string(REPLACE / \\ SRCGR ${SRCGR})
    source_group("${SRCGR}" FILES ${f})
endforeach()

if(BUILD_HOLOSUITE_LIB_STATIC)
	ADD_LIBRARY(holosuite-lib STATIC ${LIB_SRC_FILES})
else()
	ADD_LIBRARY(holosuite-lib SHARED ${LIB_SRC_FILES})
endif()

TARGET_INCLUDE_DIRECTORIES (holosuite-lib PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

TARGET_LINK_LIBRARIES(holosuite-lib ${LIBLOG4CXX_LIBRARIES} ${PCL_LIBRARIES} ${OpenCV_LIBS} ${Boost_LIBRARIES} ${OPENNI2_LIBRARY} ${FFMPEG_LIBRARIES} ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY} ${GLUT_LIBRARIES} ${GLEW_LIBRARY})

IF(WIN32)
	ADD_DEFINITIONS(-DFREEGLUT_LIB_PRAGMAS=0)
ENDIF()

IF(WITH_STATIC_GLEW)
	ADD_DEFINITIONS(-DGLEW_STATIC)
ENDIF()

IF(UNIX)
	TARGET_LINK_LIBRARIES(holosuite-lib ${GLUT_glut_LIBRARY})
ENDIF()

IF(WITH_AUDIO)
	INCLUDE_DIRECTORIES(${OPUS_INCLUDE_DIRS})
	INCLUDE_DIRECTORIES(${PORTAUDIO_INCLUDE_DIRS})
	TARGET_LINK_LIBRARIES(holosuite-lib ${OPUS_LIBRARIES} ${PORTAUDIO_LIBRARIES})
	ADD_DEFINITIONS(-DENABLE_HOLO_AUDIO)
ENDIF()

IF(WITH_DSCP2)
	INCLUDE_DIRECTORIES(${CG_INCLUDE_DIR})
	TARGET_LINK_LIBRARIES(holosuite-lib ${CG_LIBRARY} ${CG_GL_LIBRARY})
	IF(UNIX)
		TARGET_LINK_LIBRARIES(holosuite-lib ${X11_LIBRARIES})
	ENDIF()
	IF(WIN32)
		get_filename_component(CG_LIBRARY_DIR ${CG_GL_LIBRARY} DIRECTORY)
		LINK_DIRECTORIES(${CG_LIBRARY_DIR})
	ENDIF()
	ADD_DEFINITIONS(-DENABLE_HOLO_DSCP2)
ENDIF()

IF(WITH_DSCP4)
	INCLUDE_DIRECTORIES(${DSCP4_INCLUDE_DIRS})
	TARGET_LINK_LIBRARIES(holosuite-lib ${DSCP4_LIBRARIES})
	ADD_DEFINITIONS(-DENABLE_HOLO_DSCP4)
	IF(BUILD_DSCP4_STATIC)
		ADD_DEFINITIONS(-DDSCP4_STATIC)
	ENDIF()
ENDIF()

IF(WITH_ZSPACE_API)
	INCLUDE_DIRECTORIES(${ZSPACE_API_INCLUDE_DIR})
	TARGET_LINK_LIBRARIES(holosuite-lib ${ZSPACE_API_LIBRARY})
	ADD_DEFINITIONS(-DENABLE_HOLO_ZSPACE)
ENDIF()

IF(WITH_LEAPSDK)
	INCLUDE_DIRECTORIES(${LEAP_INCLUDE_DIR})
	TARGET_LINK_LIBRARIES(holosuite-lib ${LEAP_LIBRARY})
	ADD_DEFINITIONS(-DENABLE_HOLO_LEAPSDK)
ENDIF()

IF(WITH_ASSIMP)
	INCLUDE_DIRECTORIES(${assimp_INCLUDE_DIRS})
	TARGET_LINK_LIBRARIES(holosuite-lib ${assimp_LIBRARIES})
	ADD_DEFINITIONS(-DENABLE_HOLO_ASSIMP)
ENDIF()

IF(WITH_UDT)
	INCLUDE_DIRECTORIES(${UDT_INCLUDE_DIRS})
	TARGET_LINK_LIBRARIES(holosuite-lib ${UDT_LIBRARIES})
	ADD_DEFINITIONS(-DENABLE_HOLO_UDT)
	IF(WITH_STATIC_UDT)
		ADD_DEFINITIONS(-DSTATIC_UDT)
	ENDIF()
ENDIF()

SET_TARGET_PROPERTIES(holosuite-lib PROPERTIES VERSION "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}" OUTPUT_NAME ${PROJECT_NAME} CLEAN_DIRECT_OUTPUT 1)

file(GLOB SHADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/holoshaders/*.cg
					   ${CMAKE_CURRENT_SOURCE_DIR}/holoshaders/*.cl
)

# Copy shader files
#add_custom_target(copy-shader-files)
#get_target_property(MyTargetLocation holosuite-lib LOCATION)
#get_filename_component(MyTargetDir ${MyTargetLocation} PATH)

#foreach(SHADER_FILE ${SHADER_FILES})
#  add_custom_command(TARGET copy-shader-files PRE_BUILD
#                     COMMAND ${CMAKE_COMMAND} -E
#                         copy_if_different ${SHADER_FILE} ${SHADER_OUTPUT_PATH})
#  IF(WIN32)
#    add_custom_command(TARGET copy-shader-files PRE_BUILD
#                     COMMAND ${CMAKE_COMMAND} -E
#                         copy_if_different ${SHADER_FILE} ${CMAKE_BINARY_DIR}/src)
#  ENDIF()
#endforeach()
#add_dependencies(holosuite-lib copy-shader-files)

INSTALL(TARGETS holosuite-lib DESTINATION lib)

foreach ( file ${LIB_H_FILES} )
    #get_filename_component( dir ${file} DIRECTORY )
    file(RELATIVE_PATH H_GR_FILE ${CMAKE_CURRENT_SOURCE_DIR} ${file})
    get_filename_component(dir ${H_GR_FILE} DIRECTORY)
    install(FILES ${file} DESTINATION include/holosuite/${dir} )
endforeach()

INSTALL(FILES ${SHADER_FILES} DESTINATION "${CMAKE_INSTALL_PREFIX}/share/holosuite/shaders")
